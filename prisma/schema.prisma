// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastSignInAt  DateTime?
  
  // Relations
  projectsAsClient    Project[]      @relation("ClientProjects")
  bidsAsFreelancer    ProjectBid[]   @relation("FreelancerBids")
  
  @@map("users")
  @@index([clerkId])
}

model Project {
  id          String         @id @default(cuid())
  title       String
  description String
  budget      Float
  deadline    DateTime
  status      ProjectStatus  @default(OPEN)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  clientId    String
  client      User           @relation("ClientProjects", fields: [clientId], references: [id])
  categoryId  String
  category    ProjectCategory @relation(fields: [categoryId], references: [id])
  bids        ProjectBid[]
  skills      ProjectSkill[]
}

model ProjectCategory {
  id          String    @id @default(cuid()) @map("id")
  name        String    @unique @map("name")
  description String?   @map("description")
  icon        String?   @map("icon")
  projects    Project[]
  
  // Le nom de la table dans la base de donn√©es
  @@map("project_categories")
}

model ProjectBid {
  id          String   @id @default(cuid())
  amount      Float
  proposal    String
  status      BidStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  freelancerId String
  freelancer  User     @relation("FreelancerBids", fields: [freelancerId], references: [id])
}

model ProjectSkill {
  id        String   @id @default(cuid())
  name      String
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  
  @@unique([name, projectId])
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}
