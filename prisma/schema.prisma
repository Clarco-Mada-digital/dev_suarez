generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                        String         @id @default(cuid())
  name                      String?
  email                     String         @unique
  emailVerified             DateTime?
  image                     String?
  role                      String         @default("USER")
  passwordHash              String?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  accounts                  Account[]
  projectsAsFreelancer      Project[]      @relation("AssignedProjects")
  projectsAsClient          Project[]      @relation("ClientProjects")
  bidsAsFreelancer          ProjectBid[]   @relation("FreelancerBids")
  sessions                  Session[]
  notifications             Notification[]
  quoteRequestsAsFreelancer QuoteRequest[] @relation("FreelancerQuoteRequests")
  quoteRequestsAsClient     QuoteRequest[] @relation("ClientQuoteRequests")
  profile                   UserProfile?

  @@map("users")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  message     String
  read        Boolean  @default(false)
  relatedId   String?
  relatedType String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@map("notifications")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id                     String   @id @default(cuid())
  bio                    String?
  location               String?
  website                String?
  jobTitle               String?  @map("job_title")
  company                String?
  phoneNumber            String?  @map("phone_number")
  skills                 String?
  languages              String?
  awards                 String?
  availability           Boolean  @default(false)
  rating                 Float?   @default(0)
  hourlyRate             Float?   @default(0) @map("hourly_rate")
  ratingCount            Int      @default(0)
  completedProjectsCount Int      @default(0)
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Project {
  id                   String          @id @default(cuid())
  title                String
  description          String
  budget               Float
  deadline             DateTime
  status               ProjectStatus   @default(OPEN)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  clientId             String
  categoryId           String
  assignedFreelancerId String?
  freelancerRating     Int?
  assignedFreelancer   User?           @relation("AssignedProjects", fields: [assignedFreelancerId], references: [id])
  category             ProjectCategory @relation(fields: [categoryId], references: [id])
  client               User            @relation("ClientProjects", fields: [clientId], references: [id])
  bids                 ProjectBid[]
  skills               ProjectSkill[]

  @@index([clientId])
  @@index([categoryId])
  @@index([assignedFreelancerId])
}

model ProjectCategory {
  id          String    @id @default(cuid()) @map("id")
  name        String    @unique @map("name")
  description String?   @map("description")
  icon        String?   @map("icon")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  projects    Project[]

  @@map("project_categories")
}

model ProjectBid {
  id           String    @id @default(cuid())
  amount       Float
  proposal     String
  status       BidStatus @default(PENDING)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  projectId    String
  freelancerId String
  freelancer   User      @relation("FreelancerBids", fields: [freelancerId], references: [id])
  project      Project   @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([freelancerId])
}

model AISettings {
  id          String   @id @default("global")
  provider    String   @default("mock")
  model       String?
  temperature Float    @default(0.4)
  updatedAt   DateTime @updatedAt
}

model ProjectSkill {
  id        String  @id @default(cuid())
  name      String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([name, projectId])
  @@index([projectId])
}

model QuoteRequest {
  id               String      @id @default(cuid())
  clientId         String
  freelancerId     String
  title            String
  description      String
  budgetMin        Float?
  budgetMax        Float?
  deadline         DateTime?
  status           QuoteStatus @default(PENDING)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  counterBudgetMin Float?
  counterBudgetMax Float?
  counterDeadline  DateTime?
  counterMessage   String?
  freelancer       User        @relation("FreelancerQuoteRequests", fields: [freelancerId], references: [id])
  client           User        @relation("ClientQuoteRequests", fields: [clientId], references: [id])

  @@index([clientId])
  @@index([freelancerId])
  @@map("quote_requests")
}

model AiSettings {
  id          String   @id @default("global")
  provider    String   @default("mock")
  model       String?
  temperature Float    @default(0.4)
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@map("ai_settings")
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  DECLINED
  COUNTERED
}
