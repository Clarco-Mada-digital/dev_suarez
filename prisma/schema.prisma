// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  role          String      @default("USER")
  passwordHash  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  projectsAsClient    Project[]      @relation("ClientProjects")
  bidsAsFreelancer    ProjectBid[]   @relation("FreelancerBids")
  projectsAsFreelancer Project[]     @relation("AssignedProjects")
  profile             UserProfile?
  quoteRequestsAsClient     QuoteRequest[] @relation("ClientQuoteRequests")
  quoteRequestsAsFreelancer QuoteRequest[] @relation("FreelancerQuoteRequests")
  notifications              Notification[]
  
  @@map("users")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // 'REVIEW', 'MESSAGE', 'SYSTEM', etc.
  title       String
  message     String
  read        Boolean  @default(false)
  relatedId   String?  // ID lié à la notification (ex: ID du projet, de l'évaluation, etc.)
  relatedType String?  // Type de l'élément lié (ex: 'PROJECT', 'REVIEW', etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, read])
  @@map("notifications")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id                    String   @id @default(cuid())
  bio                   String?
  location              String?
  website               String?
  jobTitle              String?  @map("job_title")
  company               String?
  phoneNumber           String?  @map("phone_number")
  skills                String?
  languages             String?   // Ex: "Français, Anglais"
  awards                String?   // Ex: "Meilleur Développeur 2023, Prix de l'Innovation"
  availability          Boolean   @default(false)
  rating                Float?    @default(0)
  hourlyRate            Float?    @map("hourly_rate") @default(0)
  ratingCount           Int       @default(0)
  completedProjectsCount Int      @default(0)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  userId String    @unique
  user   User      @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Project {
  id          String         @id @default(cuid())
  title       String
  description String
  budget      Float
  deadline    DateTime
  status      ProjectStatus  @default(OPEN)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  clientId    String
  client      User           @relation("ClientProjects", fields: [clientId], references: [id])
  categoryId  String
  category    ProjectCategory @relation(fields: [categoryId], references: [id])
  bids        ProjectBid[]
  skills      ProjectSkill[]
  assignedFreelancerId String?
  assignedFreelancer   User?          @relation("AssignedProjects", fields: [assignedFreelancerId], references: [id])
  freelancerRating     Int?

  @@index([clientId])
  @@index([categoryId])
  @@index([assignedFreelancerId])
}

model ProjectCategory {
  id          String    @id @default(cuid()) @map("id")
  name        String    @unique @map("name")
  description String?   @map("description")
  icon        String?   @map("icon")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  projects    Project[]
  
  // Le nom de la table dans la base de données
  @@map("project_categories")
}

model ProjectBid {
  id          String   @id @default(cuid())
  amount      Float
  proposal    String
  status      BidStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  freelancerId String
  freelancer  User     @relation("FreelancerBids", fields: [freelancerId], references: [id])

  @@index([projectId])
  @@index([freelancerId])
}

model AISettings {
  id          String   @id @default("global")
  provider    String   @default("mock")
  model       String?
  temperature Float    @default(0.4)
  updatedAt   DateTime @updatedAt
}

model ProjectSkill {
  id        String   @id @default(cuid())
  name      String
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  
  @@unique([name, projectId])
  @@index([projectId])
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

// Quote request between a client (requester) and a freelancer (recipient)
model QuoteRequest {
  id           String      @id @default(cuid())
  clientId     String
  freelancerId String
  title        String
  description  String
  budgetMin    Float?
  budgetMax    Float?
  deadline     DateTime?
  status       QuoteStatus @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Counter proposal (from freelancer)
  counterBudgetMin Float?
  counterBudgetMax Float?
  counterDeadline  DateTime?
  counterMessage   String?

  // Relations
  client     User @relation("ClientQuoteRequests", fields: [clientId], references: [id])
  freelancer User @relation("FreelancerQuoteRequests", fields: [freelancerId], references: [id])

  @@index([clientId])
  @@index([freelancerId])
  @@map("quote_requests")
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  DECLINED
  COUNTERED
}

// Global AI settings (singleton row) to control provider/model/temperature application-wide
model AiSettings {
  id          String   @id @default("global")
  provider    String   @default("mock")
  model       String?
  temperature Float    @default(0.4)
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@map("ai_settings")
}
